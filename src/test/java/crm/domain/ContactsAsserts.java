package crm.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContactsAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactsAllPropertiesEquals(Contacts expected, Contacts actual) {
        assertContactsAutoGeneratedPropertiesEquals(expected, actual);
        assertContactsAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactsAllUpdatablePropertiesEquals(Contacts expected, Contacts actual) {
        assertContactsUpdatableFieldsEquals(expected, actual);
        assertContactsUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactsAutoGeneratedPropertiesEquals(Contacts expected, Contacts actual) {
        assertThat(expected)
            .as("Verify Contacts auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactsUpdatableFieldsEquals(Contacts expected, Contacts actual) {
        assertThat(expected)
            .as("Verify Contacts relevant properties")
            .satisfies(e -> assertThat(e.getFirst_name()).as("check first_name").isEqualTo(actual.getFirst_name()))
            .satisfies(e -> assertThat(e.getLast_name()).as("check last_name").isEqualTo(actual.getLast_name()))
            .satisfies(e -> assertThat(e.getAccount_name()).as("check account_name").isEqualTo(actual.getAccount_name()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhone()).as("check phone").isEqualTo(actual.getPhone()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContactsUpdatableRelationshipsEquals(Contacts expected, Contacts actual) {}
}
