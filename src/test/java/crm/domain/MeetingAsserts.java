package crm.domain;

import static crm.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class MeetingAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingAllPropertiesEquals(Meeting expected, Meeting actual) {
        assertMeetingAutoGeneratedPropertiesEquals(expected, actual);
        assertMeetingAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingAllUpdatablePropertiesEquals(Meeting expected, Meeting actual) {
        assertMeetingUpdatableFieldsEquals(expected, actual);
        assertMeetingUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingAutoGeneratedPropertiesEquals(Meeting expected, Meeting actual) {
        assertThat(expected)
            .as("Verify Meeting auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingUpdatableFieldsEquals(Meeting expected, Meeting actual) {
        assertThat(expected)
            .as("Verify Meeting relevant properties")
            .satisfies(e -> assertThat(e.getTitle()).as("check title").isEqualTo(actual.getTitle()))
            .satisfies(e -> assertThat(e.getFrom()).as("check from").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getFrom()))
            .satisfies(e -> assertThat(e.getTo()).as("check to").usingComparator(zonedDataTimeSameInstant).isEqualTo(actual.getTo()))
            .satisfies(e -> assertThat(e.getRelated_to()).as("check related_to").isEqualTo(actual.getRelated_to()))
            .satisfies(e -> assertThat(e.getHost()).as("check host").isEqualTo(actual.getHost()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertMeetingUpdatableRelationshipsEquals(Meeting expected, Meeting actual) {}
}
